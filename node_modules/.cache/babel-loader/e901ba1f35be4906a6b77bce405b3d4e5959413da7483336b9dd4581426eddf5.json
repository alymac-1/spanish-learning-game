{"ast":null,"code":"export const calculateSM2 = (currentStats, performanceRating) => {\n  // Implementation of SuperMemo-2 algorithm\n  let {\n    easinessFactor,\n    interval,\n    repetition\n  } = currentStats;\n  if (performanceRating >= 3) {\n    // Correct response\n    if (repetition === 0) {\n      interval = 1;\n    } else if (repetition === 1) {\n      interval = 6;\n    } else {\n      interval = Math.ceil(interval * easinessFactor);\n    }\n    repetition += 1;\n  } else {\n    // Incorrect response\n    repetition = 0;\n    interval = 1;\n  }\n\n  // Update easiness factor\n  easinessFactor = easinessFactor + (0.1 - (5 - performanceRating) * (0.08 + (5 - performanceRating) * 0.02));\n\n  // Ensure easiness factor doesn't fall below 1.3\n  easinessFactor = Math.max(easinessFactor, 1.3);\n\n  // Calculate next review date\n  const nextReview = new Date();\n  nextReview.setDate(nextReview.getDate() + interval);\n  return {\n    easinessFactor,\n    interval,\n    repetition,\n    nextReview\n  };\n};\nexport const calculateMasteryLevel = (timesCorrect, timesShown, recentPerformance = 1) => {\n  if (timesShown === 0) return 0;\n\n  // Base mastery on accuracy\n  let mastery = timesCorrect / timesShown;\n\n  // Apply weighting based on recent performance\n  const recentWeight = 0.7; // 70% weight to recent performance\n  mastery = mastery * (1 - recentWeight) + recentPerformance * recentWeight;\n  return Math.min(mastery, 1);\n};\nexport const getPerformanceRating = (isCorrect, responseTime, expectedTime = 5000) => {\n  let rating = isCorrect ? 4 : 1; // Base rating\n\n  // Adjust based on response time (faster = better)\n  if (isCorrect && responseTime < expectedTime) {\n    rating += 1; // Bonus for quick responses\n  } else if (isCorrect && responseTime > expectedTime * 2) {\n    rating -= 1; // Penalty for slow responses\n  }\n  return Math.max(1, Math.min(5, rating));\n};","map":{"version":3,"names":["calculateSM2","currentStats","performanceRating","easinessFactor","interval","repetition","Math","ceil","max","nextReview","Date","setDate","getDate","calculateMasteryLevel","timesCorrect","timesShown","recentPerformance","mastery","recentWeight","min","getPerformanceRating","isCorrect","responseTime","expectedTime","rating"],"sources":["/Users/alasdairmacmillan/Claude/Spanish/src/utils/sm2Algorithm.js"],"sourcesContent":["export const calculateSM2 = (currentStats, performanceRating) => {\n  // Implementation of SuperMemo-2 algorithm\n  let { easinessFactor, interval, repetition } = currentStats;\n\n  if (performanceRating >= 3) {\n    // Correct response\n    if (repetition === 0) {\n      interval = 1;\n    } else if (repetition === 1) {\n      interval = 6;\n    } else {\n      interval = Math.ceil(interval * easinessFactor);\n    }\n    \n    repetition += 1;\n  } else {\n    // Incorrect response\n    repetition = 0;\n    interval = 1;\n  }\n\n  // Update easiness factor\n  easinessFactor = easinessFactor + (0.1 - (5 - performanceRating) * (0.08 + (5 - performanceRating) * 0.02));\n  \n  // Ensure easiness factor doesn't fall below 1.3\n  easinessFactor = Math.max(easinessFactor, 1.3);\n\n  // Calculate next review date\n  const nextReview = new Date();\n  nextReview.setDate(nextReview.getDate() + interval);\n\n  return {\n    easinessFactor,\n    interval,\n    repetition,\n    nextReview\n  };\n};\n\nexport const calculateMasteryLevel = (timesCorrect, timesShown, recentPerformance = 1) => {\n  if (timesShown === 0) return 0;\n  \n  // Base mastery on accuracy\n  let mastery = timesCorrect / timesShown;\n  \n  // Apply weighting based on recent performance\n  const recentWeight = 0.7; // 70% weight to recent performance\n  mastery = mastery * (1 - recentWeight) + recentPerformance * recentWeight;\n  \n  return Math.min(mastery, 1);\n};\n\nexport const getPerformanceRating = (isCorrect, responseTime, expectedTime = 5000) => {\n  let rating = isCorrect ? 4 : 1; // Base rating\n  \n  // Adjust based on response time (faster = better)\n  if (isCorrect && responseTime < expectedTime) {\n    rating += 1; // Bonus for quick responses\n  } else if (isCorrect && responseTime > expectedTime * 2) {\n    rating -= 1; // Penalty for slow responses\n  }\n  \n  return Math.max(1, Math.min(5, rating));\n};\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAGA,CAACC,YAAY,EAAEC,iBAAiB,KAAK;EAC/D;EACA,IAAI;IAAEC,cAAc;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGJ,YAAY;EAE3D,IAAIC,iBAAiB,IAAI,CAAC,EAAE;IAC1B;IACA,IAAIG,UAAU,KAAK,CAAC,EAAE;MACpBD,QAAQ,GAAG,CAAC;IACd,CAAC,MAAM,IAAIC,UAAU,KAAK,CAAC,EAAE;MAC3BD,QAAQ,GAAG,CAAC;IACd,CAAC,MAAM;MACLA,QAAQ,GAAGE,IAAI,CAACC,IAAI,CAACH,QAAQ,GAAGD,cAAc,CAAC;IACjD;IAEAE,UAAU,IAAI,CAAC;EACjB,CAAC,MAAM;IACL;IACAA,UAAU,GAAG,CAAC;IACdD,QAAQ,GAAG,CAAC;EACd;;EAEA;EACAD,cAAc,GAAGA,cAAc,IAAI,GAAG,GAAG,CAAC,CAAC,GAAGD,iBAAiB,KAAK,IAAI,GAAG,CAAC,CAAC,GAAGA,iBAAiB,IAAI,IAAI,CAAC,CAAC;;EAE3G;EACAC,cAAc,GAAGG,IAAI,CAACE,GAAG,CAACL,cAAc,EAAE,GAAG,CAAC;;EAE9C;EACA,MAAMM,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC7BD,UAAU,CAACE,OAAO,CAACF,UAAU,CAACG,OAAO,CAAC,CAAC,GAAGR,QAAQ,CAAC;EAEnD,OAAO;IACLD,cAAc;IACdC,QAAQ;IACRC,UAAU;IACVI;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,qBAAqB,GAAGA,CAACC,YAAY,EAAEC,UAAU,EAAEC,iBAAiB,GAAG,CAAC,KAAK;EACxF,IAAID,UAAU,KAAK,CAAC,EAAE,OAAO,CAAC;;EAE9B;EACA,IAAIE,OAAO,GAAGH,YAAY,GAAGC,UAAU;;EAEvC;EACA,MAAMG,YAAY,GAAG,GAAG,CAAC,CAAC;EAC1BD,OAAO,GAAGA,OAAO,IAAI,CAAC,GAAGC,YAAY,CAAC,GAAGF,iBAAiB,GAAGE,YAAY;EAEzE,OAAOZ,IAAI,CAACa,GAAG,CAACF,OAAO,EAAE,CAAC,CAAC;AAC7B,CAAC;AAED,OAAO,MAAMG,oBAAoB,GAAGA,CAACC,SAAS,EAAEC,YAAY,EAAEC,YAAY,GAAG,IAAI,KAAK;EACpF,IAAIC,MAAM,GAAGH,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEhC;EACA,IAAIA,SAAS,IAAIC,YAAY,GAAGC,YAAY,EAAE;IAC5CC,MAAM,IAAI,CAAC,CAAC,CAAC;EACf,CAAC,MAAM,IAAIH,SAAS,IAAIC,YAAY,GAAGC,YAAY,GAAG,CAAC,EAAE;IACvDC,MAAM,IAAI,CAAC,CAAC,CAAC;EACf;EAEA,OAAOlB,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEF,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEK,MAAM,CAAC,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}