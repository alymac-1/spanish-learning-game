{"ast":null,"code":"// src/utils/saveUtils.js\nexport const saveGameData = gameState => {\n  try {\n    const saveData = {\n      timestamp: Date.now(),\n      version: '1.0',\n      wordStats: Array.from(gameState.wordStats.entries()).map(([key, stats]) => ({\n        key,\n        ...stats,\n        learningHistory: stats.learningHistory || []\n      })),\n      sessionStats: {\n        ...gameState.sessionStats,\n        totalPlayTime: gameState.sessionStats.startTime ? Date.now() - gameState.sessionStats.startTime : 0\n      },\n      settings: gameState.settings,\n      gameProgress: {\n        totalScore: gameState.score,\n        currentStreak: gameState.streak,\n        wordsCompleted: gameState.wordsCompleted,\n        selectedLevel: gameState.selectedLevel,\n        selectedTopic: gameState.selectedTopic,\n        isRandomMode: gameState.isRandomMode,\n        selectedLevelsForRandom: gameState.selectedLevelsForRandom\n      }\n    };\n\n    // Create downloadable file\n    const dataStr = JSON.stringify(saveData, null, 2);\n    const dataBlob = new Blob([dataStr], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    const dateStr = new Date().toISOString().split('T')[0];\n    link.download = `spanish-learning-progress-${dateStr}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    return {\n      success: true,\n      message: 'Progress saved successfully!'\n    };\n  } catch (error) {\n    console.error('Save failed:', error);\n    return {\n      success: false,\n      message: 'Failed to save progress. Please try again.'\n    };\n  }\n};\nexport const loadGameData = fileData => {\n  try {\n    const data = JSON.parse(fileData);\n\n    // Validate data structure\n    if (!data.version || !data.wordStats || !data.sessionStats) {\n      throw new Error('Invalid save file format');\n    }\n\n    // Convert wordStats back to Map\n    const wordStatsMap = new Map();\n    data.wordStats.forEach(({\n      key,\n      ...stats\n    }) => {\n      wordStatsMap.set(key, {\n        ...stats,\n        learningHistory: stats.learningHistory || [],\n        nextReview: new Date(stats.nextReview),\n        lastSeen: stats.lastSeen ? new Date(stats.lastSeen) : null,\n        lastCorrect: stats.lastCorrect ? new Date(stats.lastCorrect) : null\n      });\n    });\n    return {\n      success: true,\n      data: {\n        wordStats: wordStatsMap,\n        sessionStats: data.sessionStats,\n        settings: data.settings,\n        gameProgress: data.gameProgress\n      }\n    };\n  } catch (error) {\n    console.error('Load failed:', error);\n    return {\n      success: false,\n      message: 'Failed to load progress. Invalid file format.'\n    };\n  }\n};\nexport const exportLearningReport = gameState => {\n  try {\n    const analytics = calculateAnalytics(gameState);\n    const reportData = {\n      generatedAt: new Date().toISOString(),\n      summary: {\n        totalWords: analytics.totalWords,\n        masteredWords: analytics.masteredWords,\n        averageAccuracy: analytics.averageAccuracy,\n        totalStudyTime: analytics.sessionTime,\n        wordsPerMinute: analytics.wordsPerMinute,\n        currentStreak: gameState.streak,\n        bestStreak: gameState.sessionStats.streakRecord\n      },\n      wordProgress: Array.from(gameState.wordStats.entries()).map(([key, stats]) => {\n        var _stats$word, _stats$word2;\n        return {\n          word: key,\n          spanish: ((_stats$word = stats.word) === null || _stats$word === void 0 ? void 0 : _stats$word.spanish) || 'Unknown',\n          english: ((_stats$word2 = stats.word) === null || _stats$word2 === void 0 ? void 0 : _stats$word2.english) || 'Unknown',\n          masteryLevel: (stats.masteryLevel * 100).toFixed(1) + '%',\n          timesCorrect: stats.timesCorrect,\n          timesShown: stats.timesShown,\n          accuracy: stats.timesShown > 0 ? (stats.timesCorrect / stats.timesShown * 100).toFixed(1) + '%' : '0%',\n          nextReview: stats.nextReview.toLocaleDateString()\n        };\n      }),\n      difficultWords: gameState.sessionStats.difficultWords.map(wordKey => {\n        const stats = gameState.wordStats.get(wordKey);\n        return {\n          word: wordKey,\n          accuracy: stats && stats.timesShown > 0 ? (stats.timesCorrect / stats.timesShown * 100).toFixed(1) + '%' : '0%'\n        };\n      })\n    };\n\n    // Create CSV format for easy viewing\n    let csvContent = \"Spanish Learning Progress Report\\n\";\n    csvContent += `Generated: ${new Date().toLocaleDateString()}\\n\\n`;\n    csvContent += \"SUMMARY\\n\";\n    csvContent += `Total Words,${reportData.summary.totalWords}\\n`;\n    csvContent += `Mastered Words,${reportData.summary.masteredWords}\\n`;\n    csvContent += `Average Accuracy,${reportData.summary.averageAccuracy.toFixed(1)}%\\n`;\n    csvContent += `Study Time,${reportData.summary.totalStudyTime.toFixed(1)} minutes\\n`;\n    csvContent += `Words Per Minute,${reportData.summary.wordsPerMinute.toFixed(1)}\\n\\n`;\n    csvContent += \"WORD PROGRESS\\n\";\n    csvContent += \"Spanish,English,Mastery Level,Correct,Total,Accuracy,Next Review\\n\";\n    reportData.wordProgress.forEach(word => {\n      csvContent += `${word.spanish},${word.english},${word.masteryLevel},${word.timesCorrect},${word.timesShown},${word.accuracy},${word.nextReview}\\n`;\n    });\n    const csvBlob = new Blob([csvContent], {\n      type: 'text/csv'\n    });\n    const url = URL.createObjectURL(csvBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `spanish-learning-report-${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    return {\n      success: true,\n      message: 'Learning report exported successfully!'\n    };\n  } catch (error) {\n    console.error('Export failed:', error);\n    return {\n      success: false,\n      message: 'Failed to export report. Please try again.'\n    };\n  }\n};\nconst calculateAnalytics = gameState => {\n  const totalWords = gameState.wordStats.size;\n  const masteredWords = Array.from(gameState.wordStats.values()).filter(stat => stat.masteryLevel >= gameState.settings.masteryThreshold).length;\n  const averageAccuracy = gameState.sessionStats.questionsAnswered > 0 ? gameState.sessionStats.correctAnswers / gameState.sessionStats.questionsAnswered * 100 : 0;\n  const sessionTime = gameState.sessionStats.startTime ? (Date.now() - gameState.sessionStats.startTime) / 1000 / 60 : 0;\n  return {\n    totalWords,\n    masteredWords,\n    averageAccuracy,\n    sessionTime,\n    wordsPerMinute: sessionTime > 0 ? gameState.wordsCompleted / sessionTime : 0\n  };\n};\n\n// Auto-save functionality (saves to localStorage as backup)\nexport const autoSaveProgress = gameState => {\n  try {\n    const autoSaveData = {\n      timestamp: Date.now(),\n      wordStats: Array.from(gameState.wordStats.entries()),\n      settings: gameState.settings,\n      lastSession: {\n        score: gameState.score,\n        streak: gameState.streak,\n        wordsCompleted: gameState.wordsCompleted\n      }\n    };\n\n    // Note: In Claude.ai artifacts, localStorage is not available\n    // This would work in a real browser environment\n    console.log('Auto-save data prepared:', autoSaveData);\n    return true;\n  } catch (error) {\n    console.error('Auto-save failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["saveGameData","gameState","saveData","timestamp","Date","now","version","wordStats","Array","from","entries","map","key","stats","learningHistory","sessionStats","totalPlayTime","startTime","settings","gameProgress","totalScore","score","currentStreak","streak","wordsCompleted","selectedLevel","selectedTopic","isRandomMode","selectedLevelsForRandom","dataStr","JSON","stringify","dataBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","dateStr","toISOString","split","download","body","appendChild","click","removeChild","revokeObjectURL","success","message","error","console","loadGameData","fileData","data","parse","Error","wordStatsMap","Map","forEach","set","nextReview","lastSeen","lastCorrect","exportLearningReport","analytics","calculateAnalytics","reportData","generatedAt","summary","totalWords","masteredWords","averageAccuracy","totalStudyTime","sessionTime","wordsPerMinute","bestStreak","streakRecord","wordProgress","_stats$word","_stats$word2","word","spanish","english","masteryLevel","toFixed","timesCorrect","timesShown","accuracy","toLocaleDateString","difficultWords","wordKey","get","csvContent","csvBlob","size","values","filter","stat","masteryThreshold","length","questionsAnswered","correctAnswers","autoSaveProgress","autoSaveData","lastSession","log"],"sources":["/Users/alasdairmacmillan/Claude/Spanish/src/utils/saveUtils.js"],"sourcesContent":["// src/utils/saveUtils.js\nexport const saveGameData = (gameState) => {\n  try {\n    const saveData = {\n      timestamp: Date.now(),\n      version: '1.0',\n      wordStats: Array.from(gameState.wordStats.entries()).map(([key, stats]) => ({\n        key,\n        ...stats,\n        learningHistory: stats.learningHistory || []\n      })),\n      sessionStats: {\n        ...gameState.sessionStats,\n        totalPlayTime: gameState.sessionStats.startTime \n          ? Date.now() - gameState.sessionStats.startTime \n          : 0\n      },\n      settings: gameState.settings,\n      gameProgress: {\n        totalScore: gameState.score,\n        currentStreak: gameState.streak,\n        wordsCompleted: gameState.wordsCompleted,\n        selectedLevel: gameState.selectedLevel,\n        selectedTopic: gameState.selectedTopic,\n        isRandomMode: gameState.isRandomMode,\n        selectedLevelsForRandom: gameState.selectedLevelsForRandom\n      }\n    };\n\n    // Create downloadable file\n    const dataStr = JSON.stringify(saveData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    \n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    \n    const dateStr = new Date().toISOString().split('T')[0];\n    link.download = `spanish-learning-progress-${dateStr}.json`;\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    URL.revokeObjectURL(url);\n    \n    return { success: true, message: 'Progress saved successfully!' };\n  } catch (error) {\n    console.error('Save failed:', error);\n    return { success: false, message: 'Failed to save progress. Please try again.' };\n  }\n};\n\nexport const loadGameData = (fileData) => {\n  try {\n    const data = JSON.parse(fileData);\n    \n    // Validate data structure\n    if (!data.version || !data.wordStats || !data.sessionStats) {\n      throw new Error('Invalid save file format');\n    }\n    \n    // Convert wordStats back to Map\n    const wordStatsMap = new Map();\n    data.wordStats.forEach(({ key, ...stats }) => {\n      wordStatsMap.set(key, {\n        ...stats,\n        learningHistory: stats.learningHistory || [],\n        nextReview: new Date(stats.nextReview),\n        lastSeen: stats.lastSeen ? new Date(stats.lastSeen) : null,\n        lastCorrect: stats.lastCorrect ? new Date(stats.lastCorrect) : null\n      });\n    });\n    \n    return {\n      success: true,\n      data: {\n        wordStats: wordStatsMap,\n        sessionStats: data.sessionStats,\n        settings: data.settings,\n        gameProgress: data.gameProgress\n      }\n    };\n  } catch (error) {\n    console.error('Load failed:', error);\n    return { success: false, message: 'Failed to load progress. Invalid file format.' };\n  }\n};\n\nexport const exportLearningReport = (gameState) => {\n  try {\n    const analytics = calculateAnalytics(gameState);\n    const reportData = {\n      generatedAt: new Date().toISOString(),\n      summary: {\n        totalWords: analytics.totalWords,\n        masteredWords: analytics.masteredWords,\n        averageAccuracy: analytics.averageAccuracy,\n        totalStudyTime: analytics.sessionTime,\n        wordsPerMinute: analytics.wordsPerMinute,\n        currentStreak: gameState.streak,\n        bestStreak: gameState.sessionStats.streakRecord\n      },\n      wordProgress: Array.from(gameState.wordStats.entries()).map(([key, stats]) => ({\n        word: key,\n        spanish: stats.word?.spanish || 'Unknown',\n        english: stats.word?.english || 'Unknown',\n        masteryLevel: (stats.masteryLevel * 100).toFixed(1) + '%',\n        timesCorrect: stats.timesCorrect,\n        timesShown: stats.timesShown,\n        accuracy: stats.timesShown > 0 ? ((stats.timesCorrect / stats.timesShown) * 100).toFixed(1) + '%' : '0%',\n        nextReview: stats.nextReview.toLocaleDateString()\n      })),\n      difficultWords: gameState.sessionStats.difficultWords.map(wordKey => {\n        const stats = gameState.wordStats.get(wordKey);\n        return {\n          word: wordKey,\n          accuracy: stats && stats.timesShown > 0 \n            ? ((stats.timesCorrect / stats.timesShown) * 100).toFixed(1) + '%' \n            : '0%'\n        };\n      })\n    };\n\n    // Create CSV format for easy viewing\n    let csvContent = \"Spanish Learning Progress Report\\n\";\n    csvContent += `Generated: ${new Date().toLocaleDateString()}\\n\\n`;\n    csvContent += \"SUMMARY\\n\";\n    csvContent += `Total Words,${reportData.summary.totalWords}\\n`;\n    csvContent += `Mastered Words,${reportData.summary.masteredWords}\\n`;\n    csvContent += `Average Accuracy,${reportData.summary.averageAccuracy.toFixed(1)}%\\n`;\n    csvContent += `Study Time,${reportData.summary.totalStudyTime.toFixed(1)} minutes\\n`;\n    csvContent += `Words Per Minute,${reportData.summary.wordsPerMinute.toFixed(1)}\\n\\n`;\n    \n    csvContent += \"WORD PROGRESS\\n\";\n    csvContent += \"Spanish,English,Mastery Level,Correct,Total,Accuracy,Next Review\\n\";\n    reportData.wordProgress.forEach(word => {\n      csvContent += `${word.spanish},${word.english},${word.masteryLevel},${word.timesCorrect},${word.timesShown},${word.accuracy},${word.nextReview}\\n`;\n    });\n\n    const csvBlob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(csvBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `spanish-learning-report-${new Date().toISOString().split('T')[0]}.csv`;\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    URL.revokeObjectURL(url);\n    \n    return { success: true, message: 'Learning report exported successfully!' };\n  } catch (error) {\n    console.error('Export failed:', error);\n    return { success: false, message: 'Failed to export report. Please try again.' };\n  }\n};\n\nconst calculateAnalytics = (gameState) => {\n  const totalWords = gameState.wordStats.size;\n  const masteredWords = Array.from(gameState.wordStats.values())\n    .filter(stat => stat.masteryLevel >= gameState.settings.masteryThreshold).length;\n  const averageAccuracy = gameState.sessionStats.questionsAnswered > 0 \n    ? (gameState.sessionStats.correctAnswers / gameState.sessionStats.questionsAnswered) * 100 \n    : 0;\n  const sessionTime = gameState.sessionStats.startTime \n    ? (Date.now() - gameState.sessionStats.startTime) / 1000 / 60 \n    : 0;\n  \n  return {\n    totalWords,\n    masteredWords,\n    averageAccuracy,\n    sessionTime,\n    wordsPerMinute: sessionTime > 0 ? gameState.wordsCompleted / sessionTime : 0\n  };\n};\n\n// Auto-save functionality (saves to localStorage as backup)\nexport const autoSaveProgress = (gameState) => {\n  try {\n    const autoSaveData = {\n      timestamp: Date.now(),\n      wordStats: Array.from(gameState.wordStats.entries()),\n      settings: gameState.settings,\n      lastSession: {\n        score: gameState.score,\n        streak: gameState.streak,\n        wordsCompleted: gameState.wordsCompleted\n      }\n    };\n    \n    // Note: In Claude.ai artifacts, localStorage is not available\n    // This would work in a real browser environment\n    console.log('Auto-save data prepared:', autoSaveData);\n    return true;\n  } catch (error) {\n    console.error('Auto-save failed:', error);\n    return false;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}