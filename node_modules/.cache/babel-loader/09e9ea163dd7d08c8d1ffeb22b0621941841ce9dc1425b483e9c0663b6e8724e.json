{"ast":null,"code":"import { calculateSM2, calculateMasteryLevel, getPerformanceRating } from './sm2Algorithm';\nimport { words } from '../data/words';\nexport const useWordStats = () => {\n  // This would be a custom hook implementation\n  // For the sake of this example, I'm providing the structure\n  return {\n    wordStats: new Map(),\n    availableWords: [],\n    currentWord: null,\n    questionType: 'translation',\n    userAnswer: '',\n    selectedChoice: null,\n    feedback: null,\n    score: 0,\n    streak: 0,\n    wordsCompleted: 0,\n    sessionStats: {\n      questionsAnswered: 0,\n      correctAnswers: 0,\n      streakRecord: 0,\n      difficultWords: [],\n      startTime: Date.now()\n    },\n    settings: {\n      questionTypes: ['translation', 'reverse', 'multiple', 'fillblank', 'pronunciation'],\n      spacedRepetitionEnabled: true,\n      pronunciationHints: true,\n      masteryThreshold: 0.85\n    },\n    setSettings: () => {},\n    initializeWordPool: () => {},\n    generateNextQuestion: () => {},\n    checkAnswer: () => {},\n    setUserAnswer: () => {},\n    setSelectedChoice: () => {},\n    setFeedback: () => {}\n  };\n};\nexport const getRandomQuestionType = enabledTypes => {\n  const availableTypes = enabledTypes.filter(type => ['translation', 'reverse', 'multiple', 'fillblank', 'pronunciation'].includes(type));\n  if (availableTypes.length === 0) {\n    return 'translation'; // Fallback\n  }\n  const weights = {\n    translation: 25,\n    reverse: 25,\n    multiple: 20,\n    fillblank: 15,\n    pronunciation: 15\n  };\n  const weightedTypes = availableTypes.flatMap(type => Array(weights[type]).fill(type));\n  return weightedTypes[Math.floor(Math.random() * weightedTypes.length)];\n};\nexport const generateMultipleChoiceOptions = (correctWord, allWords, count = 4) => {\n  const options = new Set([correctWord.english]);\n  while (options.size < Math.min(count, allWords.length + 1)) {\n    const randomWord = allWords[Math.floor(Math.random() * allWords.length)];\n    options.add(randomWord.english);\n  }\n  return Array.from(options).sort(() => Math.random() - 0.5);\n};\nexport const generateFillBlankSentence = word => {\n  const sentences = {\n    hola: [\"___! ¿Cómo estás?\", \"Cuando veo a mi amigo, digo ___.\"],\n    gracias: [\"Muchas ___ por tu ayuda.\", \"___ por el regalo.\"],\n    por_favor: [\"¿Puedes pasarme el agua, ___?\", \"___, ¿dónde está el baño?\"]\n    // Add more sentences for other words\n  };\n  const defaultSentences = [`Necesito usar la palabra \"${word.spanish}\" que significa \"${word.english}\".`, `Complete: La palabra para \"${word.english}\" es _____.`];\n  const availableSentences = sentences[word.spanish] || defaultSentences;\n  return availableSentences[Math.floor(Math.random() * availableSentences.length)];\n};","map":{"version":3,"names":["calculateSM2","calculateMasteryLevel","getPerformanceRating","words","useWordStats","wordStats","Map","availableWords","currentWord","questionType","userAnswer","selectedChoice","feedback","score","streak","wordsCompleted","sessionStats","questionsAnswered","correctAnswers","streakRecord","difficultWords","startTime","Date","now","settings","questionTypes","spacedRepetitionEnabled","pronunciationHints","masteryThreshold","setSettings","initializeWordPool","generateNextQuestion","checkAnswer","setUserAnswer","setSelectedChoice","setFeedback","getRandomQuestionType","enabledTypes","availableTypes","filter","type","includes","length","weights","translation","reverse","multiple","fillblank","pronunciation","weightedTypes","flatMap","Array","fill","Math","floor","random","generateMultipleChoiceOptions","correctWord","allWords","count","options","Set","english","size","min","randomWord","add","from","sort","generateFillBlankSentence","word","sentences","hola","gracias","por_favor","defaultSentences","spanish","availableSentences"],"sources":["/Users/alasdairmacmillan/Claude/Spanish/src/utils/wordUtils.js"],"sourcesContent":["import { calculateSM2, calculateMasteryLevel, getPerformanceRating } from './sm2Algorithm';\nimport { words } from '../data/words';\n\nexport const useWordStats = () => {\n  // This would be a custom hook implementation\n  // For the sake of this example, I'm providing the structure\n  return {\n    wordStats: new Map(),\n    availableWords: [],\n    currentWord: null,\n    questionType: 'translation',\n    userAnswer: '',\n    selectedChoice: null,\n    feedback: null,\n    score: 0,\n    streak: 0,\n    wordsCompleted: 0,\n    sessionStats: {\n      questionsAnswered: 0,\n      correctAnswers: 0,\n      streakRecord: 0,\n      difficultWords: [],\n      startTime: Date.now()\n    },\n    settings: {\n      questionTypes: ['translation', 'reverse', 'multiple', 'fillblank', 'pronunciation'],\n      spacedRepetitionEnabled: true,\n      pronunciationHints: true,\n      masteryThreshold: 0.85\n    },\n    setSettings: () => {},\n    initializeWordPool: () => {},\n    generateNextQuestion: () => {},\n    checkAnswer: () => {},\n    setUserAnswer: () => {},\n    setSelectedChoice: () => {},\n    setFeedback: () => {}\n  };\n};\n\nexport const getRandomQuestionType = (enabledTypes) => {\n  const availableTypes = enabledTypes.filter(type => \n    ['translation', 'reverse', 'multiple', 'fillblank', 'pronunciation'].includes(type)\n  );\n  \n  if (availableTypes.length === 0) {\n    return 'translation'; // Fallback\n  }\n  \n  const weights = {\n    translation: 25,\n    reverse: 25,\n    multiple: 20,\n    fillblank: 15,\n    pronunciation: 15\n  };\n  \n  const weightedTypes = availableTypes.flatMap(type => \n    Array(weights[type]).fill(type)\n  );\n  \n  return weightedTypes[Math.floor(Math.random() * weightedTypes.length)];\n};\n\nexport const generateMultipleChoiceOptions = (correctWord, allWords, count = 4) => {\n  const options = new Set([correctWord.english]);\n  \n  while (options.size < Math.min(count, allWords.length + 1)) {\n    const randomWord = allWords[Math.floor(Math.random() * allWords.length)];\n    options.add(randomWord.english);\n  }\n  \n  return Array.from(options).sort(() => Math.random() - 0.5);\n};\n\nexport const generateFillBlankSentence = (word) => {\n  const sentences = {\n    hola: [\"___! ¿Cómo estás?\", \"Cuando veo a mi amigo, digo ___.\"],\n    gracias: [\"Muchas ___ por tu ayuda.\", \"___ por el regalo.\"],\n    por_favor: [\"¿Puedes pasarme el agua, ___?\", \"___, ¿dónde está el baño?\"],\n    // Add more sentences for other words\n  };\n  \n  const defaultSentences = [\n    `Necesito usar la palabra \"${word.spanish}\" que significa \"${word.english}\".`,\n    `Complete: La palabra para \"${word.english}\" es _____.`\n  ];\n  \n  const availableSentences = sentences[word.spanish] || defaultSentences;\n  return availableSentences[Math.floor(Math.random() * availableSentences.length)];\n};\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,qBAAqB,EAAEC,oBAAoB,QAAQ,gBAAgB;AAC1F,SAASC,KAAK,QAAQ,eAAe;AAErC,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC;EACA;EACA,OAAO;IACLC,SAAS,EAAE,IAAIC,GAAG,CAAC,CAAC;IACpBC,cAAc,EAAE,EAAE;IAClBC,WAAW,EAAE,IAAI;IACjBC,YAAY,EAAE,aAAa;IAC3BC,UAAU,EAAE,EAAE;IACdC,cAAc,EAAE,IAAI;IACpBC,QAAQ,EAAE,IAAI;IACdC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE,CAAC;IACTC,cAAc,EAAE,CAAC;IACjBC,YAAY,EAAE;MACZC,iBAAiB,EAAE,CAAC;MACpBC,cAAc,EAAE,CAAC;MACjBC,YAAY,EAAE,CAAC;MACfC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC;IACDC,QAAQ,EAAE;MACRC,aAAa,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,eAAe,CAAC;MACnFC,uBAAuB,EAAE,IAAI;MAC7BC,kBAAkB,EAAE,IAAI;MACxBC,gBAAgB,EAAE;IACpB,CAAC;IACDC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;IACrBC,kBAAkB,EAAEA,CAAA,KAAM,CAAC,CAAC;IAC5BC,oBAAoB,EAAEA,CAAA,KAAM,CAAC,CAAC;IAC9BC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;IACrBC,aAAa,EAAEA,CAAA,KAAM,CAAC,CAAC;IACvBC,iBAAiB,EAAEA,CAAA,KAAM,CAAC,CAAC;IAC3BC,WAAW,EAAEA,CAAA,KAAM,CAAC;EACtB,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIC,YAAY,IAAK;EACrD,MAAMC,cAAc,GAAGD,YAAY,CAACE,MAAM,CAACC,IAAI,IAC7C,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,eAAe,CAAC,CAACC,QAAQ,CAACD,IAAI,CACpF,CAAC;EAED,IAAIF,cAAc,CAACI,MAAM,KAAK,CAAC,EAAE;IAC/B,OAAO,aAAa,CAAC,CAAC;EACxB;EAEA,MAAMC,OAAO,GAAG;IACdC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,aAAa,EAAE;EACjB,CAAC;EAED,MAAMC,aAAa,GAAGX,cAAc,CAACY,OAAO,CAACV,IAAI,IAC/CW,KAAK,CAACR,OAAO,CAACH,IAAI,CAAC,CAAC,CAACY,IAAI,CAACZ,IAAI,CAChC,CAAC;EAED,OAAOS,aAAa,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,aAAa,CAACP,MAAM,CAAC,CAAC;AACxE,CAAC;AAED,OAAO,MAAMc,6BAA6B,GAAGA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,KAAK,GAAG,CAAC,KAAK;EACjF,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAACJ,WAAW,CAACK,OAAO,CAAC,CAAC;EAE9C,OAAOF,OAAO,CAACG,IAAI,GAAGV,IAAI,CAACW,GAAG,CAACL,KAAK,EAAED,QAAQ,CAAChB,MAAM,GAAG,CAAC,CAAC,EAAE;IAC1D,MAAMuB,UAAU,GAAGP,QAAQ,CAACL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGG,QAAQ,CAAChB,MAAM,CAAC,CAAC;IACxEkB,OAAO,CAACM,GAAG,CAACD,UAAU,CAACH,OAAO,CAAC;EACjC;EAEA,OAAOX,KAAK,CAACgB,IAAI,CAACP,OAAO,CAAC,CAACQ,IAAI,CAAC,MAAMf,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMc,yBAAyB,GAAIC,IAAI,IAAK;EACjD,MAAMC,SAAS,GAAG;IAChBC,IAAI,EAAE,CAAC,mBAAmB,EAAE,kCAAkC,CAAC;IAC/DC,OAAO,EAAE,CAAC,0BAA0B,EAAE,oBAAoB,CAAC;IAC3DC,SAAS,EAAE,CAAC,+BAA+B,EAAE,2BAA2B;IACxE;EACF,CAAC;EAED,MAAMC,gBAAgB,GAAG,CACvB,6BAA6BL,IAAI,CAACM,OAAO,oBAAoBN,IAAI,CAACR,OAAO,IAAI,EAC7E,8BAA8BQ,IAAI,CAACR,OAAO,aAAa,CACxD;EAED,MAAMe,kBAAkB,GAAGN,SAAS,CAACD,IAAI,CAACM,OAAO,CAAC,IAAID,gBAAgB;EACtE,OAAOE,kBAAkB,CAACxB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGsB,kBAAkB,CAACnC,MAAM,CAAC,CAAC;AAClF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}