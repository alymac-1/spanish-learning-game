{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { calculateSM2, calculateMasteryLevel, getPerformanceRating } from './sm2Algorithm';\nimport { levels } from '../data/words';\nexport const useWordStats = () => {\n  _s();\n  const [wordStats, setWordStats] = useState(new Map());\n  const [availableWords, setAvailableWords] = useState([]);\n  const [currentWord, setCurrentWord] = useState(null);\n  const [questionType, setQuestionType] = useState('translation');\n  const [userAnswer, setUserAnswer] = useState('');\n  const [selectedChoice, setSelectedChoice] = useState('');\n  const [feedback, setFeedback] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [wordsCompleted, setWordsCompleted] = useState(0);\n  const [sessionStats, setSessionStats] = useState({\n    startTime: Date.now(),\n    totalTime: 0,\n    questionsAnswered: 0,\n    correctAnswers: 0,\n    streakRecord: 0,\n    difficultWords: [],\n    learningVelocity: 0\n  });\n  const [settings, setSettings] = useState({\n    spacedRepetitionEnabled: true,\n    adaptiveDifficulty: true,\n    pronunciationHints: true,\n    contextualLearning: true,\n    masteryThreshold: 0.85,\n    reviewInterval: 'optimal',\n    questionTypeWeights: {\n      translation: 1,\n      reverse: 1,\n      multiple: 1,\n      fillblank: 1,\n      pronunciation: 1\n    }\n  });\n  const [multipleChoiceOptions, setMultipleChoiceOptions] = useState([]);\n  const [fillBlankSentence, setFillBlankSentence] = useState('');\n  const [fillBlankAnswer, setFillBlankAnswer] = useState('');\n  const initializeWordPool = (level, topic, randomMode, selectedLevelsForRandom) => {\n    let words = [];\n    if (randomMode) {\n      Object.entries(levels).forEach(([levelKey, levelData]) => {\n        if (selectedLevelsForRandom[levelKey]) {\n          Object.values(levelData.topics).forEach(topicWords => {\n            words = words.concat(topicWords);\n          });\n        }\n      });\n    } else {\n      words = levels[level].topics[topic];\n    }\n    setAvailableWords(words);\n    // For now, just set the first word\n    if (words.length > 0) {\n      setCurrentWord(words[0]);\n    }\n  };\n  const generateNextQuestion = () => {\n    if (availableWords.length === 0) return;\n\n    // Simple implementation for now - just get a random word\n    const randomIndex = Math.floor(Math.random() * availableWords.length);\n    const word = availableWords[randomIndex];\n    setCurrentWord(word);\n    setQuestionType('translation'); // Default to translation for now\n    setUserAnswer('');\n    setSelectedChoice('');\n  };\n  const checkAnswer = () => {\n    if (!currentWord) return;\n    let isCorrect = false;\n    switch (questionType) {\n      case 'translation':\n        isCorrect = userAnswer.toLowerCase().trim() === currentWord.english.toLowerCase();\n        break;\n      case 'reverse':\n        isCorrect = userAnswer.toLowerCase().trim() === currentWord.spanish.toLowerCase();\n        break;\n      case 'multiple':\n        isCorrect = selectedChoice === currentWord.english;\n        break;\n      case 'fillblank':\n        isCorrect = userAnswer.toLowerCase().trim() === fillBlankAnswer.toLowerCase();\n        break;\n      case 'pronunciation':\n        isCorrect = userAnswer.trim().length > 0;\n        break;\n    }\n    if (isCorrect) {\n      setScore(prev => prev + 10);\n      setStreak(prev => prev + 1);\n      setFeedback({\n        type: 'correct',\n        message: 'Correct!'\n      });\n    } else {\n      setStreak(0);\n      setFeedback({\n        type: 'incorrect',\n        message: `The answer is \"${currentWord.english}\"`\n      });\n    }\n    setWordsCompleted(prev => prev + 1);\n    setTimeout(() => {\n      generateNextQuestion();\n      setFeedback(null);\n    }, 2000);\n  };\n  return {\n    wordStats,\n    availableWords,\n    currentWord,\n    questionType,\n    userAnswer,\n    selectedChoice,\n    feedback,\n    score,\n    streak,\n    wordsCompleted,\n    sessionStats,\n    settings,\n    setSettings,\n    initializeWordPool,\n    generateNextQuestion,\n    checkAnswer,\n    setUserAnswer,\n    setSelectedChoice,\n    setFeedback,\n    setScore,\n    setStreak,\n    setWordsCompleted,\n    multipleChoiceOptions,\n    fillBlankSentence,\n    fillBlankAnswer\n  };\n};\n_s(useWordStats, \"+J9RAJSRkU473ca2ehMa38o1+9s=\");\nexport const getRandomQuestionType = enabledTypes => {\n  const availableTypes = enabledTypes.filter(type => ['translation', 'reverse', 'multiple', 'fillblank', 'pronunciation'].includes(type));\n  if (availableTypes.length === 0) {\n    return 'translation'; // Fallback\n  }\n  const weights = {\n    translation: 25,\n    reverse: 25,\n    multiple: 20,\n    fillblank: 15,\n    pronunciation: 15\n  };\n  const weightedTypes = availableTypes.flatMap(type => Array(weights[type]).fill(type));\n  return weightedTypes[Math.floor(Math.random() * weightedTypes.length)];\n};\nexport const generateMultipleChoiceOptions = (correctWord, allWords, count = 4) => {\n  const options = new Set([correctWord.english]);\n  while (options.size < Math.min(count, allWords.length + 1)) {\n    const randomWord = allWords[Math.floor(Math.random() * allWords.length)];\n    options.add(randomWord.english);\n  }\n  return Array.from(options).sort(() => Math.random() - 0.5);\n};\nexport const generateFillBlankSentence = word => {\n  const sentences = {\n    hola: [\"___! ¿Cómo estás?\", \"Cuando veo a mi amigo, digo ___.\"],\n    gracias: [\"Muchas ___ por tu ayuda.\", \"___ por el regalo.\"],\n    por_favor: [\"¿Puedes pasarme el agua, ___?\", \"___, ¿dónde está el baño?\"]\n    // Add more sentences for other words\n  };\n  const defaultSentences = [`Necesito usar la palabra \"${word.spanish}\" que significa \"${word.english}\".`, `Complete: La palabra para \"${word.english}\" es _____.`];\n  const availableSentences = sentences[word.spanish] || defaultSentences;\n  return availableSentences[Math.floor(Math.random() * availableSentences.length)];\n};","map":{"version":3,"names":["useState","useEffect","calculateSM2","calculateMasteryLevel","getPerformanceRating","levels","useWordStats","_s","wordStats","setWordStats","Map","availableWords","setAvailableWords","currentWord","setCurrentWord","questionType","setQuestionType","userAnswer","setUserAnswer","selectedChoice","setSelectedChoice","feedback","setFeedback","score","setScore","streak","setStreak","wordsCompleted","setWordsCompleted","sessionStats","setSessionStats","startTime","Date","now","totalTime","questionsAnswered","correctAnswers","streakRecord","difficultWords","learningVelocity","settings","setSettings","spacedRepetitionEnabled","adaptiveDifficulty","pronunciationHints","contextualLearning","masteryThreshold","reviewInterval","questionTypeWeights","translation","reverse","multiple","fillblank","pronunciation","multipleChoiceOptions","setMultipleChoiceOptions","fillBlankSentence","setFillBlankSentence","fillBlankAnswer","setFillBlankAnswer","initializeWordPool","level","topic","randomMode","selectedLevelsForRandom","words","Object","entries","forEach","levelKey","levelData","values","topics","topicWords","concat","length","generateNextQuestion","randomIndex","Math","floor","random","word","checkAnswer","isCorrect","toLowerCase","trim","english","spanish","prev","type","message","setTimeout","getRandomQuestionType","enabledTypes","availableTypes","filter","includes","weights","weightedTypes","flatMap","Array","fill","generateMultipleChoiceOptions","correctWord","allWords","count","options","Set","size","min","randomWord","add","from","sort","generateFillBlankSentence","sentences","hola","gracias","por_favor","defaultSentences","availableSentences"],"sources":["/Users/alasdairmacmillan/Claude/Spanish/src/utils/wordUtils.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { calculateSM2, calculateMasteryLevel, getPerformanceRating } from './sm2Algorithm';\nimport { levels } from '../data/words';\n\nexport const useWordStats = () => {\n  const [wordStats, setWordStats] = useState(new Map());\n  const [availableWords, setAvailableWords] = useState([]);\n  const [currentWord, setCurrentWord] = useState(null);\n  const [questionType, setQuestionType] = useState('translation');\n  const [userAnswer, setUserAnswer] = useState('');\n  const [selectedChoice, setSelectedChoice] = useState('');\n  const [feedback, setFeedback] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [wordsCompleted, setWordsCompleted] = useState(0);\n  const [sessionStats, setSessionStats] = useState({\n    startTime: Date.now(),\n    totalTime: 0,\n    questionsAnswered: 0,\n    correctAnswers: 0,\n    streakRecord: 0,\n    difficultWords: [],\n    learningVelocity: 0\n  });\n  const [settings, setSettings] = useState({\n    spacedRepetitionEnabled: true,\n    adaptiveDifficulty: true,\n    pronunciationHints: true,\n    contextualLearning: true,\n    masteryThreshold: 0.85,\n    reviewInterval: 'optimal',\n    questionTypeWeights: {\n      translation: 1,\n      reverse: 1,\n      multiple: 1,\n      fillblank: 1,\n      pronunciation: 1\n    }\n  });\n\n  const [multipleChoiceOptions, setMultipleChoiceOptions] = useState([]);\n  const [fillBlankSentence, setFillBlankSentence] = useState('');\n  const [fillBlankAnswer, setFillBlankAnswer] = useState('');\n\n  const initializeWordPool = (level, topic, randomMode, selectedLevelsForRandom) => {\n    let words = [];\n    \n    if (randomMode) {\n      Object.entries(levels).forEach(([levelKey, levelData]) => {\n        if (selectedLevelsForRandom[levelKey]) {\n          Object.values(levelData.topics).forEach(topicWords => {\n            words = words.concat(topicWords);\n          });\n        }\n      });\n    } else {\n      words = levels[level].topics[topic];\n    }\n    \n    setAvailableWords(words);\n    // For now, just set the first word\n    if (words.length > 0) {\n      setCurrentWord(words[0]);\n    }\n  };\n\n  const generateNextQuestion = () => {\n    if (availableWords.length === 0) return;\n    \n    // Simple implementation for now - just get a random word\n    const randomIndex = Math.floor(Math.random() * availableWords.length);\n    const word = availableWords[randomIndex];\n    setCurrentWord(word);\n    setQuestionType('translation'); // Default to translation for now\n    setUserAnswer('');\n    setSelectedChoice('');\n  };\n\n  const checkAnswer = () => {\n    if (!currentWord) return;\n    \n    let isCorrect = false;\n    switch (questionType) {\n      case 'translation':\n        isCorrect = userAnswer.toLowerCase().trim() === currentWord.english.toLowerCase();\n        break;\n      case 'reverse':\n        isCorrect = userAnswer.toLowerCase().trim() === currentWord.spanish.toLowerCase();\n        break;\n      case 'multiple':\n        isCorrect = selectedChoice === currentWord.english;\n        break;\n      case 'fillblank':\n        isCorrect = userAnswer.toLowerCase().trim() === fillBlankAnswer.toLowerCase();\n        break;\n      case 'pronunciation':\n        isCorrect = userAnswer.trim().length > 0;\n        break;\n    }\n    \n    if (isCorrect) {\n      setScore(prev => prev + 10);\n      setStreak(prev => prev + 1);\n      setFeedback({ type: 'correct', message: 'Correct!' });\n    } else {\n      setStreak(0);\n      setFeedback({ type: 'incorrect', message: `The answer is \"${currentWord.english}\"` });\n    }\n    \n    setWordsCompleted(prev => prev + 1);\n    \n    setTimeout(() => {\n      generateNextQuestion();\n      setFeedback(null);\n    }, 2000);\n  };\n\n  return {\n    wordStats,\n    availableWords,\n    currentWord,\n    questionType,\n    userAnswer,\n    selectedChoice,\n    feedback,\n    score,\n    streak,\n    wordsCompleted,\n    sessionStats,\n    settings,\n    setSettings,\n    initializeWordPool,\n    generateNextQuestion,\n    checkAnswer,\n    setUserAnswer,\n    setSelectedChoice,\n    setFeedback,\n    setScore,\n    setStreak,\n    setWordsCompleted,\n    multipleChoiceOptions,\n    fillBlankSentence,\n    fillBlankAnswer\n  };\n};\n\nexport const getRandomQuestionType = (enabledTypes) => {\n  const availableTypes = enabledTypes.filter(type => \n    ['translation', 'reverse', 'multiple', 'fillblank', 'pronunciation'].includes(type)\n  );\n  \n  if (availableTypes.length === 0) {\n    return 'translation'; // Fallback\n  }\n  \n  const weights = {\n    translation: 25,\n    reverse: 25,\n    multiple: 20,\n    fillblank: 15,\n    pronunciation: 15\n  };\n  \n  const weightedTypes = availableTypes.flatMap(type => \n    Array(weights[type]).fill(type)\n  );\n  \n  return weightedTypes[Math.floor(Math.random() * weightedTypes.length)];\n};\n\nexport const generateMultipleChoiceOptions = (correctWord, allWords, count = 4) => {\n  const options = new Set([correctWord.english]);\n  \n  while (options.size < Math.min(count, allWords.length + 1)) {\n    const randomWord = allWords[Math.floor(Math.random() * allWords.length)];\n    options.add(randomWord.english);\n  }\n  \n  return Array.from(options).sort(() => Math.random() - 0.5);\n};\n\nexport const generateFillBlankSentence = (word) => {\n  const sentences = {\n    hola: [\"___! ¿Cómo estás?\", \"Cuando veo a mi amigo, digo ___.\"],\n    gracias: [\"Muchas ___ por tu ayuda.\", \"___ por el regalo.\"],\n    por_favor: [\"¿Puedes pasarme el agua, ___?\", \"___, ¿dónde está el baño?\"],\n    // Add more sentences for other words\n  };\n  \n  const defaultSentences = [\n    `Necesito usar la palabra \"${word.spanish}\" que significa \"${word.english}\".`,\n    `Complete: La palabra para \"${word.english}\" es _____.`\n  ];\n  \n  const availableSentences = sentences[word.spanish] || defaultSentences;\n  return availableSentences[Math.floor(Math.random() * availableSentences.length)];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}